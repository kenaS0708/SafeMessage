# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import asyncio
import json
import sqlite3
import sys
from asyncio import Lock
from asyncore import loop

import socketio
from deep_translator import GoogleTranslator
from telethon import TelegramClient, events, errors, functions
from telethon.events import NewMessage

import threading
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from telethon.tl.types import User, Channel
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout, Bidirectional
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import load_model
from translate import Translator
import os
from telethon.events import NewMessage
import pickle
from quart import Quart, jsonify, request, Response
import logging
import base64
from cryptography.fernet import Fernet
import chardet  # üìå –û–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞
import joblib
from vosk import Model, KaldiRecognizer
import wave
from pydub import AudioSegment
import aiohttp
import time
import psutil  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏

def load_encryption_key():
    key_path = "encryption_key.key"
    with open(key_path, "rb") as key_file:
        key = key_file.read()
    return key

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∏—Ñ—Ä–∞
encryption_key = load_encryption_key()
cipher = Fernet(encryption_key)

chat_updates = {}  # –•—Ä–∞–Ω–∏—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤


def encrypt_session_file(file_path):
    try:
        with open(file_path, "rb") as file:
            data = file.read()

        # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –µ–≥–æ
        if not data.startswith(b"SQLite format 3"):
            print(f"‚úÖ –§–∞–π–ª {file_path} —É–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return

        encrypted_data = cipher.encrypt(data)

        with open(file_path, "wb") as file:
            file.write(encrypted_data)

        print(f"‚úÖ –§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")

import os

import os
import time

def force_delete_file(file_path):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º."""
    retries = 5
    for i in range(retries):
        try:
            os.remove(file_path)
            print(f"‚úÖ –§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
            return
        except PermissionError:
            print(f"‚ö†Ô∏è –§–∞–π–ª {file_path} –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ({i+1}/{retries})...")
            time.sleep(1)  # –ñ–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞


def is_valid_session(file_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –¥–æ–ø—É—Å—Ç–∏–º–æ–π SQLite-–±–∞–∑–æ–π."""
    if not os.path.exists(file_path):
        print(f"‚ö†Ô∏è –§–∞–π–ª {file_path} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return False

    try:
        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞ (SQLite —Ñ–æ—Ä–º–∞—Ç 3)
        with open(file_path, "rb") as f:
            header = f.read(16)
        if not header.startswith(b"SQLite format 3"):
            print(f"‚ö†Ô∏è –§–∞–π–ª {file_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è SQLite-–±–∞–∑–æ–π.")
            return False

        # ‚úÖ –û—Ç–∫—Ä—ã–≤–∞–µ–º SQLite –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        conn = sqlite3.connect(file_path)
        cursor = conn.cursor()
        cursor.execute("PRAGMA integrity_check;")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±–∞–∑—ã
        result = cursor.fetchone()
        conn.close()

        if result and result[0] == "ok":
            return True
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª {file_path} –ø–æ–≤—Ä–µ–∂–¥—ë–Ω (SQLite integrity check –Ω–µ –ø—Ä–æ–π–¥–µ–Ω).")
            return False

    except sqlite3.DatabaseError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {file_path}: {e}")
        return False


def decrypt_session_file(file_path):
    try:
        with open(file_path, "rb") as file:
            encrypted_data = file.read()

        # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
        if encrypted_data.startswith(b"SQLite format 3"):
            print(f"‚úÖ –§–∞–π–ª {file_path} —É–∂–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return

        decrypted_data = cipher.decrypt(encrypted_data)

        with open(file_path, "wb") as file:
            file.write(decrypted_data)

        print(f"‚úÖ –§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")


def init_db():
    conn = sqlite3.connect("dangerous_messages.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS dangerous_messages (
            chat_id INTEGER NOT NULL,
            message_id INTEGER NOT NULL,
            reason TEXT,
            threat_type TEXT,
            PRIMARY KEY (chat_id, message_id)
        )
    """)
    conn.commit()
    conn.close()

init_db()

app = Quart(__name__, static_folder="static")


locks = {}

chat_cache = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–∞—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
dangerous_messages = {}

logging.basicConfig(level=logging.DEBUG)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
# –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä Socket.IO
sio = socketio.AsyncServer(async_mode='asgi', cors_allowed_origins='*')

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ASGI –¥–ª—è Socket.IO –∏ —Å–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ —Å Quart
app_asgi = socketio.ASGIApp(sio, app)

# Telegram API –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
API_ID = 28034410
API_HASH = '97de1536f327bbf14380a13e59a9a5be'
clients = {}

import speech_recognition as sr

async def startup():
    await load_existing_sessions()
    asyncio.create_task(cleanup_locks())
    asyncio.create_task(monitor_new_messages())


async def load_existing_sessions():
    session_files = [f for f in os.listdir('.') if f.startswith('session_') and f.endswith('.session')]

    for session_file in session_files:
        try:
            phone_number = session_file.replace('session_', '').replace('.session', '')

            print(f"[{phone_number}] üîç –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏...")

            decrypt_session_file(session_file)  # ‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π

            client = TelegramClient(session_file, API_ID, API_HASH)

            try:
                await client.connect()
            except Exception as e:
                logger.error(f"[{phone_number}] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å: {e}")
                client = TelegramClient(session_file, API_ID, API_HASH)
                await client.connect()

            if await client.is_user_authorized():
                clients[phone_number] = client
                logger.info(f"[{phone_number}] ‚úÖ –ö–ª–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                add_message_handler(phone_number)  # ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            else:
                logger.warning(f"[{phone_number}] ‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é")
                os.remove(session_file)  # –£–¥–∞–ª—è–µ–º –±–∏—Ç—É—é —Å–µ—Å—Å–∏—é

            encrypt_session_file(session_file)  # ‚úÖ –®–∏—Ñ—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ

        except Exception as e:
            logger.error(f"[{phone_number}] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")


async def monitor_new_messages():
    while True:
        try:
            if not clients:
                logger.warning("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
            for phone_number, client in clients.items():
                if not client.is_connected():
                    logger.info(f"[{phone_number}] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞...")
                    await client.connect()

                logger.info(f"[{phone_number}] –°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
                add_message_handler(phone_number)

            await asyncio.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ monitor_new_messages: {e}")



def start_global_loop():
    asyncio.set_event_loop(global_loop)
    global_loop.run_forever()

global_loop = asyncio.new_event_loop()
threading.Thread(target=lambda: asyncio.set_event_loop(global_loop) or global_loop.run_forever(), daemon=True).start()
print(f"–ì–ª–æ–±–∞–ª—å–Ω—ã–π event loop –∑–∞–ø—É—â–µ–Ω: {global_loop.is_running()}")



async def download_audio(audio_url, save_path):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ."""
    async with aiohttp.ClientSession() as session:
        async with session.get(audio_url) as response:
            if response.status == 200:
                with open(save_path, "wb") as f:
                    f.write(await response.read())
            else:
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ: {response.status}")

import requests
import json
import asyncio


async def handle_voice_message(event, phone_number):
    try:
        sender = await event.get_sender()
        chat = await event.get_chat()
        message_id = event.message.id
        current_user = await clients[phone_number].get_me()

        if sender.id == current_user.id:
            return

        if isinstance(chat, Channel) and chat.broadcast:
            return

        if not event.message.voice:
            return

        # ‚úÖ –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_path = await event.message.download_media()
        if not os.path.exists(voice_path):
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª {voice_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        logger.info(f"‚úÖ –§–∞–π–ª {voice_path} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω.")

        # ‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ä–µ—á—å
        transcribed_text = transcribe_audio(voice_path)

        if not transcribed_text:
            transcribed_text = "[–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏]"

        logger.info(f"üìù –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {transcribed_text}")

        # ‚úÖ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —É–≥—Ä–æ–∑—ã
        analysis_result = analyze_message_local(transcribed_text)

        is_phishing = analysis_result['phishing'] == '–§–∏—à–∏–Ω–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
        is_terrorism = analysis_result['terrorism'] == '–¢–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'

        if is_phishing or is_terrorism:
            threat_type = "–§–∏—à–∏–Ω–≥" if is_phishing else "–¢–µ—Ä—Ä–æ—Ä–∏–∑–º"
            reason = "Phishing content detected" if is_phishing else "Terrorist content detected"
            save_dangerous_message(chat.id, message_id, reason, threat_type)

            logger.info(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–ø–∞—Å–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")

            transcribed_text_result = "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "+transcribed_text

            # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–∞ –∫–ª–∏–µ–Ω—Ç
            await sio.emit(
                'dangerous_message',
                {
                    'phoneNumber': phone_number,
                    'chatId': chat.id,
                    'messageId': message_id,
                    'message': transcribed_text_result,
                    'analysis': {
                        'phishing': analysis_result['phishing'],
                        'terrorism': analysis_result['terrorism'],
                        'threatType': threat_type,
                        'reason': reason
                    }
                },
                namespace='/'
            )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# model = Model("model")
#
#
# AudioSegment.converter = r"C:\ProgramData\chocolatey\bin\ffmpeg.exe"


def convert_to_wav(audio_path: str) -> str:
    audio = AudioSegment.from_file(audio_path)
    wav_path = audio_path.replace(".oga", ".wav")
    audio.export(wav_path, format="wav")
    return wav_path


def transcribe_audio(audio_path: str) -> str:
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ WAV, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if not audio_path.endswith(".wav"):
            audio_path = convert_to_wav(audio_path)

        recognizer = sr.Recognizer()
        with sr.AudioFile(audio_path) as source:
            audio_data = recognizer.record(source)

        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Google Web Speech API
        transcript = recognizer.recognize_google(audio_data, language="ru-RU")
        return transcript
    except sr.UnknownValueError:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"
    except sr.RequestError as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"


phishing_model = load_model("phishing_detector.h5")
tokenizer = joblib.load("tokenizer.pkl")

# 1. –ó–∞–≥—Ä—É–∑–∏–º –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Ä—Ä–æ—Ä–∏–∑–º–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
terror_model = load_model('message_classifier_terror.h5')
terror_tokenizer = joblib.load('tokenizer_terror.pkl')  # –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

def detect_terrorism_message(message: str):
    # –¢–æ–∫–µ–Ω–∏–∑–∏—Ä—É–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏ —Ç–µ—Ä—Ä–æ—Ä–∏–∑–º–∞
    transformed_msg = terror_tokenizer.texts_to_sequences([message])
    transformed_msg = pad_sequences(transformed_msg, maxlen=100)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω–µ

    # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–µ—Ä—Ä–æ—Ä–∏–∑–º–∞
    prediction = terror_model.predict(transformed_msg)[0][0]
    return "–¢–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" if prediction > 0.5 else "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"


# –î–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏
MAX_SEQUENCE_LENGTH = 100  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ —Ç–æ –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ –∏ –ø—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –º–æ–¥–µ–ª–∏!

def translate_to_english(text):
    return GoogleTranslator(source='auto', target='en').translate(text)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ñ–∏—à–∏–Ω–≥–∞
def detect_phishing_message(message: str):
    translated_msg = translate_to_english(message)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º
    transformed_msg = tokenizer.texts_to_sequences([translated_msg])  # –¢–æ–∫–µ–Ω–∏–∑–∏—Ä—É–µ–º
    transformed_msg = pad_sequences(transformed_msg, maxlen=MAX_SEQUENCE_LENGTH)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω–µ

    # –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ñ–∏—à–∏–Ω–≥–∞
    prediction = phishing_model.predict(transformed_msg)[0][0]
    return "–§–∏—à–∏–Ω–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" if prediction > 0.5 else "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"

def analyze_message_local(message):
    result_phishing = detect_phishing_message(message)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–∏—à–∏–Ω–≥
    result_terrorism = detect_terrorism_message(message)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–µ—Ä—Ä–æ—Ä–∏–∑–º

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    print(f"–§–∏—à–∏–Ω–≥: {result_phishing}, –¢–µ—Ä—Ä–æ—Ä–∏–∑–º: {result_terrorism}")
    return {"phishing": result_phishing, "terrorism": result_terrorism}


def save_dangerous_message(chat_id, message_id, reason, threat_type):
    conn = sqlite3.connect("dangerous_messages.db")
    cursor = conn.cursor()
    cursor.execute("""
        INSERT OR IGNORE INTO dangerous_messages (chat_id, message_id, reason, threat_type)
        VALUES (?, ?, ?, ?)
    """, (chat_id, message_id, reason, threat_type))
    conn.commit()
    conn.close()


async def handle_new_message(event, phone_number):
    try:
        sender = await event.get_sender()
        chat = await event.get_chat()
        message_id = event.message.id
        current_user = await clients[phone_number].get_me()

        if sender.id == current_user.id or (isinstance(chat, Channel) and chat.broadcast):
            return

        # ‚úÖ –§–∏–∫—Å–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞
        chat_updates[chat.id] = time.time()

        # ‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if event.message.voice:
            # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            voice_path = await event.message.download_media()
            transcribed_text = transcribe_audio(voice_path) if voice_path else "[–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏]"
            message_text = f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {transcribed_text}"
        else:
            message_text = event.message.text or "[–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]"

        logger.info(f"üì© –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (ID: {message_id}) –≤ —á–∞—Ç–µ {chat.id}: {message_text}")

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ñ–∏—à–∏–Ω–≥/—Ç–µ—Ä—Ä–æ—Ä–∏–∑–º
        is_dangerous = False
        threat_type = None
        reason = None
        analysis_data = {}

        if event.message.voice and transcribed_text:
            analysis_result = analyze_message_local(transcribed_text)
            is_phishing = analysis_result.get('phishing') == '–§–∏—à–∏–Ω–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
            is_terrorism = analysis_result.get('terrorism') == '–¢–µ—Ä—Ä–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'

            if is_phishing or is_terrorism:
                is_dangerous = True
                threat_type = "–§–∏—à–∏–Ω–≥" if is_phishing else "–¢–µ—Ä—Ä–æ—Ä–∏–∑–º"
                reason = "Phishing content detected" if is_phishing else "Terrorist content detected"
                save_dangerous_message(chat.id, message_id, reason, threat_type)

                analysis_data = {
                    'phishing': analysis_result['phishing'],
                    'terrorism': analysis_result['terrorism'],
                    'threatType': threat_type,
                    'reason': reason
                }

                await sio.emit(
                    'dangerous_message',
                    {
                        'phoneNumber': phone_number,
                        'chatId': chat.id,
                        'messageId': message_id,
                        'message': message_text,
                        'analysis': analysis_data
                    },
                    namespace='/'
                )

        logger.info(f"‚úÖ –ß–∞—Ç {chat.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ `chat_updates` –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.")

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ –≤ WebSocket —Å –∞–Ω–∞–ª–∏–∑–æ–º —É–≥—Ä–æ–∑
        await sio.emit(
            'chat_update',
            {
                'phoneNumber': phone_number,
                'chatId': chat.id,
                'lastMessage': message_text,
                'timestamp': event.message.date.timestamp(),
                'messageId': message_id,
                'isDangerous': is_dangerous,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–∞—Å–Ω–æ–µ
                'analysis': analysis_data  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ —É–≥—Ä–æ–∑
            },
            namespace='/'
        )

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ WebSocket-–∫–æ–º–Ω–∞—Ç—É
        message_data = {
            "chatId": chat.id,
            "messageId": message_id,
            "sender": sender.id,
            "text": message_text,
            "timestamp": event.message.date.timestamp(),
            "isDangerous": is_dangerous,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–∞—Å–Ω–æ–µ
            "analysis": analysis_data  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ —É–≥—Ä–æ–∑
        }

        clients_in_room = sio.manager.rooms.get(str(chat.id), set())
        if clients_in_room:
            await sio.emit("message_received", message_data, room=str(chat.id))
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ {chat.id}, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")



def add_message_handler(phone_number):
    try:
        if phone_number not in clients:
            raise Exception(f"–ö–ª–∏–µ–Ω—Ç –¥–ª—è {phone_number} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        client = clients[phone_number]

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        client.remove_event_handler(handle_new_message)
        client.remove_event_handler(handle_voice_message)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        client.add_event_handler(
            lambda event: asyncio.create_task(handle_new_message(event, phone_number)),
            NewMessage()
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        client.add_event_handler(
            lambda event: asyncio.create_task(handle_voice_message(event, phone_number)),
            events.NewMessage(incoming=True, pattern=None)
        )

        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è {phone_number}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π: {e}")



async def authenticate_and_send_code(phone_number):
    lock = await get_lock(phone_number)
    async with lock:
        session_file = f"session_{phone_number}.session"

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª–∏–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if phone_number in clients:
            await clients[phone_number].disconnect()
            client = clients.pop(phone_number, None)
            if client:
                await client.disconnect()  # ‚úÖ –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                await client.disconnect()

        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if os.path.exists(session_file):
                time.sleep(1)
                print(f"[{phone_number}] –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏...")
                os.remove(session_file)

            client = TelegramClient(
                session_file, API_ID, API_HASH, loop=loop,
                system_version="4.16.30-vxCUSTOM", device_model="Android", app_version="1.0.0"
            )
            await client.connect()
            await client.send_code_request(phone_number)

            clients[phone_number] = client
            print(f"[{phone_number}] –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

        except Exception as e:
            print(f"[{phone_number}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {e}")

async def authenticate_and_verify_code(phone_number, code):
    lock = await get_lock(phone_number)
    async with lock:
        session_file = f"session_{phone_number}.session"
        if not os.path.exists(session_file):
            print(f"[{phone_number}] –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return False  # <== –í–æ–∑–≤—Ä–∞—â–∞–µ–º False

        decrypt_session_file(session_file)

        client = clients.get(phone_number)
        if not client:
            print(f"[{phone_number}] –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return False  # <== –í–æ–∑–≤—Ä–∞—â–∞–µ–º False

        if await client.is_user_authorized():
            print(f"[{phone_number}] –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
            return True  # <== –í–æ–∑–≤—Ä–∞—â–∞–µ–º True

        try:
            print(f"[{phone_number}] –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞...")
            await client.sign_in(phone=phone_number, code=code)

            if await client.is_user_authorized():
                print(f"[{phone_number}] –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")
                add_message_handler(phone_number)
                return True  # <== –í–æ–∑–≤—Ä–∞—â–∞–µ–º True
            else:
                print(f"[{phone_number}] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
                return False  # <== –í–æ–∑–≤—Ä–∞—â–∞–µ–º False

        except errors.PhoneCodeInvalidError:
            print(f"[{phone_number}] –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!")
            return False  # <== –í–æ–∑–≤—Ä–∞—â–∞–µ–º False


@app.route('/verify-code', methods=['POST'])
async def verify_code():
    try:
        data = await request.get_json()
        phone_number = data.get('phoneNumber')
        code = data.get('code')

        if not phone_number or not code:
            return jsonify({"success": False, "error": "Both phoneNumber and code are required"}), 400

        success = await authenticate_and_verify_code(phone_number, code)

        if success:
            return jsonify({"success": True, "message": "Code verified successfully"}), 200
        else:
            return jsonify({"success": False, "error": "Invalid code"}), 400
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 400


async def get_lock(phone_number):
    if phone_number not in locks:
        locks[phone_number] = Lock()
    return locks[phone_number]

async def cleanup_locks(interval=3600):
    while True:
        await asyncio.sleep(interval)  # –ñ–¥–µ–º –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        to_remove = []
        for phone_number, lock in locks.items():
            if phone_number not in clients:  # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                to_remove.append(phone_number)
        for phone_number in to_remove:
            await remove_lock(phone_number)
        print(f"–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {len(to_remove)} –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.")

async def startup():
    asyncio.create_task(cleanup_locks())

async def remove_lock(phone_number):
    if phone_number in locks:
        del locks[phone_number]
        print(f"[{phone_number}] –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")


@app.route('/send-code', methods=['POST'])
async def send_code():
    try:
        data = await request.get_json()
        phone_number = data.get('phoneNumber')
        if not phone_number:
            return jsonify({"error": "phoneNumber is required"}), 400

        await authenticate_and_send_code(phone_number)
        return jsonify({"message": "Code sent successfully"}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 400


@app.route('/get-chats', methods=['GET'])
async def get_chats():
    phone_number = request.args.get('phoneNumber')

    if not phone_number:
        return jsonify({"error": "Missing phoneNumber parameter"}), 400

    session_file = f"session_{phone_number}.session"

    if phone_number not in clients:
        logger.warning(f"[{phone_number}] ‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–º—è—Ç–∏. –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å...")
        await load_existing_sessions()

    if phone_number not in clients:
        logger.error(f"[{phone_number}] ‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏! –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å...")

        try:
            decrypt_session_file(session_file)

            clients[phone_number] = TelegramClient(session_file, API_ID, API_HASH)
            await clients[phone_number].connect()

            if not await clients[phone_number].is_user_authorized():
                logger.error(f"[{phone_number}] ‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                os.remove(session_file)
                return jsonify({"error": "Session not found, please re-authenticate"}), 400

            add_message_handler(phone_number)
            encrypt_session_file(session_file)

        except Exception as e:
            logger.error(f"[{phone_number}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return jsonify({"error": "Session recovery failed"}), 400

    client = clients[phone_number]

    logger.info(f"[{phone_number}] üìû –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤...")
    new_chats = await get_unknown_chats(client)

    # üî• –õ–æ–≥–∏—Ä—É–µ–º, –∫–∞–∫–∏–µ —á–∞—Ç—ã –ø–µ—Ä–µ–¥–∞–µ–º –≤ –∫–ª–∏–µ–Ω—Ç

    return jsonify(new_chats), 200


def safely_remove_file(file_path):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    try:
        if os.path.exists(file_path):
            os.remove(file_path)
            print(f"–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    except PermissionError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
    except Exception as e:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")


@app.route('/get-updated-chats', methods=['GET'])
async def get_updated_chats():
    phone_number = request.args.get('phoneNumber')

    if not phone_number:
        return jsonify({"error": "Missing phoneNumber parameter"}), 400

    client = clients.get(phone_number)
    if not client:
        return jsonify({"error": "Client not found"}), 400

    updated_chat_ids = list(chat_updates.keys())  # –ë–µ—Ä–µ–º ID –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
    updated_chats = await get_specific_chats(client, updated_chat_ids)
    chat_updates.clear()  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤

    logger.info(f"[{phone_number}] üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —á–∞—Ç—ã: {updated_chats}")

    return jsonify(updated_chats), 200


async def get_specific_chats(client, chat_ids):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –æ —á–∞—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å."""
    try:
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: {chat_ids}")

        all_chats = await client.get_dialogs()
        logger.info(f"üìú –í—Å–µ–≥–æ —á–∞—Ç–æ–≤ –æ—Ç Telegram: {len(all_chats)}")

        updated_chats = [chat for chat in all_chats if str(chat.id) in chat_ids]
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(updated_chats)}")

        result = [
            {
                "chat_id": str(chat.id),
                "chat_name": chat.title,
                "last_message": chat.message.text if chat.message else "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π",
                "avatar": None,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–≤–∞—Ç–∞—Ä–æ–∫
                "last_message_timestamp": chat.message.date.timestamp() if chat.message else 0,
                "unreadCount": chat.unread_count
            }
            for chat in updated_chats
        ]

        logger.info(f"üì§ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
        return result

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: {e}")
        return []


async def get_unknown_chats(client):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –Ω–∏—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ."""
    try:
        dialogs = await client.get_dialogs()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤")

        unknown_chats = []
        max_message_length = 50

        async def process_dialog(dialog):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –¥–∏–∞–ª–æ–≥."""
            if not dialog.is_user:
                return None

            entity = await client.get_entity(dialog.id)
            if entity.contact or entity.bot or dialog.is_channel:
                return None

            # –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if dialog.id in chat_cache:
                return {
                    **chat_cache[dialog.id],
                    "last_message": format_message(dialog.message, max_message_length),
                    "last_message_timestamp": dialog.message.date.timestamp() if dialog.message else 0,
                }

            # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
            photo = None
            if entity.photo:
                try:
                    raw_photo = await client.download_profile_photo(entity.id, file=bytes)
                    if raw_photo:
                        photo = base64.b64encode(raw_photo).decode('utf-8')
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –¥–ª—è {entity.id}: {e}")

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            chat_data = {
                "chat_id": dialog.id,
                "chat_name": entity.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                "avatar": photo,
            }
            chat_cache[dialog.id] = chat_data

            return {
                **chat_data,
                "last_message": format_message(dialog.message, max_message_length),
                "last_message_timestamp": dialog.message.date.timestamp() if dialog.message else 0,
            }

        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤
        results = await asyncio.gather(*(process_dialog(dialog) for dialog in dialogs))
        unknown_chats = [res for res in results if res]

        return unknown_chats

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_unknown_chats: {e}")
        raise

def format_message(message, max_length):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è."""
    if not message:
        return "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"
    text = message.message or "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
    return text[:max_length] + "..." if len(text) > max_length else text

def is_message_dangerous(chat_id, message_id):
    conn = sqlite3.connect("dangerous_messages.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT reason, threat_type FROM dangerous_messages
        WHERE chat_id = ? AND message_id = ?
    """, (chat_id, message_id))
    result = cursor.fetchone()
    conn.close()
    return result

VOICE_FOLDER = "static/voices"
os.makedirs(VOICE_FOLDER, exist_ok=True)

@app.route('/chat/<chat_id>/history', methods=['GET'])
async def get_chat_history(chat_id):
    phone_number = request.args.get('phoneNumber')

    logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: chat_id={chat_id}, phoneNumber={phone_number}")

    if not phone_number:
        return jsonify({"error": "Missing phoneNumber parameter"}), 400

    if phone_number not in clients:
        logging.warning(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {phone_number} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–º—è—Ç–∏. –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å...")
        session_file = f"session_{phone_number}.session"

        try:
            decrypt_session_file(session_file)  # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

            client = TelegramClient(session_file, API_ID, API_HASH)
            await client.connect()

            if await client.is_user_authorized():
                clients[phone_number] = client
                logging.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {phone_number} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            else:
                logging.error(f"‚ùå –ö–ª–∏–µ–Ω—Ç {phone_number} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏")
                return jsonify({"error": "Client is not authenticated"}), 401

            encrypt_session_file(session_file)  # –ó–∞—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ {phone_number}: {e}")
            return jsonify({"error": "Session recovery failed"}), 400

    client = clients[phone_number]

    if not await client.is_user_authorized():
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: –ö–ª–∏–µ–Ω—Ç {phone_number} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        return jsonify({"error": "Client is not authenticated"}), 401

    current_user = await client.get_me()
    messages = []
    logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ {chat_id} –¥–ª—è {phone_number}...")

    # üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥–∏, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
    await client.get_dialogs()

    # üîπ –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å —á–∞—Ç–∞
    try:
        entity = await client.get_entity(int(chat_id))
    except ValueError:
        try:
            entity = await client.get_input_entity(int(chat_id))
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ß–∞—Ç {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã...")

            try:
                user = await client(functions.contacts.ResolveUsernameRequest(chat_id))
                entity = user.users[0] if user.users else None
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞ {chat_id}: {e}")
                return jsonify({"error": "Invalid chat ID"}), 400

    # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    async for message in client.iter_messages(entity, limit=100):
        message_text = message.message or ""
        timestamp = int(message.date.timestamp()) if message.date else None
        sender_id = message.sender_id

        # üîπ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–µ—Å–ª–∏ –æ—à–∏–±–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
        try:
            chat_entity = await client.get_entity(sender_id)
            chat_name = chat_entity.title if hasattr(chat_entity, 'title') else chat_entity.first_name
            avatar_base64 = None

            if chat_entity.photo:
                avatar_bytes = await client.download_profile_photo(chat_entity, file=bytes)
                avatar_base64 = base64.b64encode(avatar_bytes).decode("utf-8")
        except Exception as e:
            logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {sender_id}: {e}")
            chat_name = "Unknown"
            avatar_base64 = None

        # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–∞—Å–Ω—ã–º
        danger_info = is_message_dangerous(chat_id, message.id)
        is_dangerous = danger_info is not None
        reason = danger_info[0] if danger_info else None
        threat_type = danger_info[1] if danger_info else None

        logging.info(f"üì© Message ID {message.id} - Date: {message.date}")

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.voice:
            message_type = "Voice"
        elif message.video:
            message_type = "Video"
        elif message.photo:
            message_type = "Pic"
        elif message.video_note:
            message_type = "VideoM"
        else:
            message_type = message.message.strip() if message.message else "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"

        messages.append({
            "id": message.id,
            "message": message_text,
            "isMine": sender_id == current_user.id,
            "avatar": avatar_base64,
            "chatId": chat_id,
            "chatName": chat_name,
            "isDangerous": is_dangerous,
            "reason": reason,
            "threatType": threat_type,
            "timestampchat": timestamp,
            "type": message_type,
        })

    logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π.")
    return jsonify(messages), 200

@app.route('/block-contact', methods=['POST'])
async def block_contact_api():
    try:
        print("–ó–∞–ø—Ä–æ—Å –Ω–∞ /block-contact")
        data = await request.get_json()
        chat_id = data.get('chatId')  # –ü–æ–ª—É—á–∞–µ–º chatId –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        print(f"–ü–æ–ª—É—á–µ–Ω chatId: {chat_id}")

        if not chat_id:
            return jsonify({"error": "chatId is required"}), 400

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ clients
        print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ clients:", clients.keys())

        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞)
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å, –∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–ª–∏–µ–Ω—Ç
        for phone_number, client in clients.items():
            print(f"–ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º {phone_number}")
            result = await block_contact(client, chat_id)
            if result:
                return jsonify({"message": f"–ö–æ–Ω—Ç–∞–∫—Ç —Å chatId {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"}), 200

        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
        return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"}), 404

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return jsonify({"error": str(e)}), 500


async def block_contact(client, chat_id):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º chatId –≤ –æ–±—ä–µ–∫—Ç InputPeer
        entity = await client.get_input_entity(int(chat_id))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º chatId –≤ int, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞

        # –í—ã–ø–æ–ª–Ω—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        await client(functions.contacts.BlockRequest(entity))
        print(f"–ö–æ–Ω—Ç–∞–∫—Ç —Å chatId {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å chatId {chat_id}: {e}")
        return False


@sio.on("join_chat")
async def join_chat(sid, chat_id):
    logger.info(f"üîå –ö–ª–∏–µ–Ω—Ç {sid} –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ {chat_id} (—Ç–∏–ø: {type(chat_id)})")

    if not isinstance(chat_id, str):
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: chat_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –Ω–æ –ø–æ–ª—É—á–µ–Ω {type(chat_id)}")
        return  # –ï—Å–ª–∏ ID –Ω–µ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

    await sio.enter_room(sid, chat_id)  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞

    all_rooms = sio.manager.rooms.get('/', {})  # ‚úÖ –ë–µ—Ä–µ–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    clients_in_room = all_rooms.get(chat_id, {})  # ‚úÖ –ë–µ—Ä–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –∏–∑ –Ω—É–∂–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
    logger.info(f"üîå –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–∫–µ—Ç—ã: {list(sio.manager.rooms['/'].keys())}")

    logger.info(f" –í—Å–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ—Å–ª–µ join: {all_rooms}")
    logger.info(f"üì¢ –ö–ª–∏–µ–Ω—Ç—ã –≤ –∫–æ–º–Ω–∞—Ç–µ {chat_id} –ø–æ—Å–ª–µ join: {clients_in_room.keys()}")  # üí° –í—ã–≤–æ–¥–∏–º `.keys()`

    if sid in clients_in_room:
        logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {sid} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª—Å—è –≤ –∫–æ–º–Ω–∞—Ç—É {chat_id}")
    else:
        logger.warning(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç {sid} –ù–ï –¥–æ–±–∞–≤–∏–ª—Å—è –≤ –∫–æ–º–Ω–∞—Ç—É {chat_id}!")

@sio.on('connect')
def on_connect(sid, environ):
    logger.info(f"üö™ –ö–ª–∏–µ–Ω—Ç {sid} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è.")

if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

@sio.on('disconnect')
def on_disconnect(sid):
    logger.info(f"üö™ –ö–ª–∏–µ–Ω—Ç {sid} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª –≤ –∫–æ–º–Ω–∞—Ç–µ
    for room in sio.manager.rooms:
        logger.info(f"–ö–æ–º–Ω–∞—Ç–∞ {room} –∏–º–µ–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {sio.manager.rooms[room]}")


@app.websocket('/updates')
async def updates():
    while True:
        await asyncio.sleep(1)  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

if __name__ == '__main__':
    startup()  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏

    import uvicorn
    uvicorn.run(app_asgi, host='0.0.0.0', port=5000)